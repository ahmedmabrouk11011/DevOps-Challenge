name: Python CI/CD

on: push

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
    
      # Runs a single command using the runners shell, using run:
      - run: echo "Job automatically triggered by event ${{ github.event_name }}."
      
      # Runs a set of commands using the runners shell, using run: |
      - run: |
          echo "Job running on a ${{ runner.os }} server hosted by GitHub."
          echo "On branch ${{ github.ref }} of repository ${{ github.repository }}."
          
      - name: Check out repository code so it can be run by GitHub
        uses: actions/checkout@v2
        
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      
      - name: List files in repository
        run: |
          echo "The contents of the repository are:"
          ls ${{ github.workspace }}

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          
      - run: echo "Python has been set up."
       
      - name: Run the Python code in helloworld.py
        run: |
          echo "Running Python code"
          python tests/test.py
  build:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout 
        uses: actions/checkout@v2
      -
        name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/tradebyte:latest
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Deploy Docker Compose
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        script: |
          whoami
          ls -al
